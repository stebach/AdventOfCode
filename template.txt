"""
Solution for day {{day}} of year {{year}}
"""

import os

def puzzle_input():
    """Parsed input"""
    with open(os.path.dirname(__file__) + "/input.txt", "r", encoding="utf-8") as inputdata:
        # as one big text
        # return inputdata.read()

        # as tuple (int)
        # return tuple(map(lambda line: int(line.strip()), inputdata.readlines()))

        # as tuple (strings)
        # return tuple(map(lambda line: line.strip(), inputdata.readlines()))

        # run lines through function
        # return parse_lines(inputdata.readlines())

        # as tuple (strings) with parse_line
        return tuple(map(parse_line, inputdata.readlines()))

def parse_line(line):
    return line.strip()

def parse_lines(lines):
    return [x for x in lines]

def part1(data):
    """Solve part 1"""
    print(data)
    exit()
    return data

def part2(data):
    """Solve part 2"""
    print(data)
    exit()
    return data

def draw_map():
    map = networkx.Graph()
    map.add_edge((0,0),(0,1))
    map.add_edge((0,1),(1,1))
    map.add_edge((1,0),(1,1))
    networkx.shortest_path(map, (0,0), (1,0))
    networkx.draw(map, pos={x:x for x in map.nodes}, with_labels=True)
    plt.show()


def solve(data):
    """Solve the puzzle for the given input"""
    solution1 = part1(data)
    solution2 = part2(data)
    return solution1, solution2

if __name__ == "__main__":
    puzzle_input = puzzle_input()
    solutions = solve(puzzle_input)
    print("\n".join(str(solution) for solution in solutions))
