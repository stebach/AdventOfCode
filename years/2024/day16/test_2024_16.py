import solve_2024_16 as subject
import pytest

@pytest.fixture
def puzzle_input():
    return [
        '###############',
        '#.......#....E#',
        '#.#.###.#.###.#',
        '#.....#.#...#.#',
        '#.###.#####.#.#',
        '#.#.#.......#.#',
        '#.#.#####.###.#',
        '#...........#.#',
        '###.#.#####.#.#',
        '#...#.....#.#.#',
        '#.#.#.###.#.#.#',
        '#.....#...#.#.#',
        '#.###.#.#.#.#.#',
        '#S..#.....#...#',
        '###############'
    ]

@pytest.fixture
def puzzle_input2():
    return [
        '#################',
        '#...#...#...#..E#',
        '#.#.#.#.#.#.#.#.#',
        '#.#.#.#...#...#.#',
        '#.#.#.#.###.#.#.#',
        '#...#.#.#.....#.#',
        '#.#.#.#.#.#####.#',
        '#.#...#.#.#.....#',
        '#.#.#####.#.###.#',
        '#.#.#.......#...#',
        '#.#.###.#####.###',
        '#.#.#...#.....#.#',
        '#.#.#.#####.###.#',
        '#.#.#.........#.#',
        '#.#.#.#########.#',
        '#S#.............#',
        '#################'
    ]

def test_parse_lines(puzzle_input):
    assert subject.parse_lines(puzzle_input) == {
        'start': (1, 13),
        'end': (13, 1),
        'path': set([
            (1,1), (2,1), (3,1), (4,1), (5,1), (6,1), (7,1), (9,1), (10,1), (11,1), (12,1), (13,1), (1,2),
            (3,2), (7,2), (9,2), (13,2), (1,3), (2,3), (3,3), (4,3), (5,3), (7,3), (9,3), (10,3), (11,3),
            (13,3), (1,4), (5,4), (11,4), (13,4), (1,5), (3,5), (5,5), (6,5), (7,5), (8,5), (9,5), (10,5),
            (11,5), (13,5), (1,6), (3,6), (9,6), (13,6), (1,7), (2,7), (3,7), (4,7), (5,7), (6,7), (7,7),
            (8,7), (9,7), (10,7), (11,7), (13,7), (3,8), (5,8), (11,8), (13,8), (1,9), (2,9), (3,9), (5,9),
            (6,9), (7,9), (8,9), (9,9), (11,9), (13,9), (1,10), (3,10), (5,10), (9,10), (11,10), (13,10),
            (1,11), (2,11), (3,11), (4,11), (5,11), (7,11), (8,11), (9,11), (11,11), (13,11), (1,12), (5,12),
            (7,12), (9,12), (11,12), (13,12), (1,13), (2,13), (3,13), (5,13), (6,13), (7,13), (8,13), (9,13),
            (11,13), (12,13), (13,13)]
        )
    }

def test_lowest_score(puzzle_input, puzzle_input2):
    data = subject.parse_lines(puzzle_input)
    assert subject.lowest_score(data) == (7036, 45)

    data2 = subject.parse_lines(puzzle_input2)
    assert subject.lowest_score(data2) == (11048, 64)

