import solve_2024_15 as subject
import pytest

@pytest.fixture
def puzzle_input():
    return [
        '##########',
        '#..O..O.O#',
        '#......O.#',
        '#.OO..O.O#',
        '#..O@..O.#',
        '#O#..O...#',
        '#O..O..O.#',
        '#.OO.O.OO#',
        '#....O...#',
        '##########',
        '',
        '<vv>^<v^>v>^vv^v>v<>v^v<v<^vv<<<^><<><>>v<vvv<>^v^>^<<<><<v<<<v^vv^v>^',
        'vvv<<^>^v^^><<>>><>^<<><^vv^^<>vvv<>><^^v>^>vv<>v<<<<v<^v>^<^^>>>^<v<v',
        '><>vv>v^v^<>><>>>><^^>vv>v<^^^>>v^v^<^^>v^^>v^<^v>v<>>v^v^<v>v^^<^^vv<',
        '<<v<^>>^^^^>>>v^<>vvv^><v<<<>^^^vv^<vvv>^>v<^^^^v<>^>vvvv><>>v^<<^^^^^',
        '^><^><>>><>^^<<^^v>>><^<v>^<vv>>v>>>^v><>^v><<<<v>>v<v<v>vvv>^<><<>^><',
        '^>><>^v<><^vvv<^^<><v<<<<<><^v<<<><<<^^<v<^^^><^>>^<v^><<<^>>^v<v^v<v^',
        '>^>>^v>vv>^<<^v<>><<><<v<<v><>v<^vv<<<>^^v^>^^>>><<^v>>v^v><^^>>^<>vv^',
        '<><^^>^^^<><vvvvv^v<v<<>^v<v>v<<^><<><<><<<^^<<<^<<>><<><^^^>^^<>^>v<>',
        '^^>vv<^v^v<vv>^<><v<^v>^^^>>>^^vvv^>vvv<>>>^<^>>>>>^<<^v>^vvv<>^<><<v>',
        'v^^>>><<^^<>>^v^<v^vv<>v^<<>^<^v^v><^<<<><<^<v><v<>vv>>v><v^<vv<>v^<<^'
    ]

@pytest.fixture
def puzzle_input2():
    return [
        '########',
        '#..O.O.#',
        '##@.O..#',
        '#...O..#',
        '#.#.O..#',
        '#...O..#',
        '#......#',
        '########',
        '',
        '<^^>>>vv<v>>v<<'
    ]

def test_parse_lines(puzzle_input):
    assert subject.parse_lines(puzzle_input) == {
        'h': 8,
        'w': 8,
        'coords':(
            (2,0),(5,0),(7,0),(6,1),
            (1,2),(2,2),(5,2),(7,2),
            (2,3),(6,3),(0,4),(4,4),
            (0,5),(3,5),(6,5),(1,6),
            (2,6),(4,6),(6,6),(7,6),
            (4,7),
        ),
        'robot':(3,3),
        'walls':(
            (-1, -1), (0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1),
            (-1, 0), (8, 0),
            (-1, 1), (8, 1),
            (-1, 2), (8, 2),
            (-1, 3), (8, 3),
            (-1, 4), (1, 4), (8, 4),
            (-1, 5), (8, 5),
            (-1, 6), (8, 6),
            (-1, 7), (8, 7),
            (-1, 8), (0, 8), (1, 8), (2, 8), (3, 8), (4, 8), (5, 8), (6, 8), (7, 8), (8, 8)
        ),
        'moves':(
            2,1,1,0,3,2,1,3,0,1,0,3,1,1,3,1,0,1,2,0,1,3,1,2,1,2,3,1,1,2,2,2,3,0,2,2,0,2,0,0,1,2,1,1,1,2,0,3,1,3,0,3,2,2,2,0,2,2,1,2,2,2,1,3,1,1,3,1,0,3,
            1,1,1,2,2,3,0,3,1,3,3,0,2,2,0,0,0,2,0,3,2,2,0,2,3,1,1,3,3,2,0,1,1,1,2,0,0,2,3,3,1,0,3,0,1,1,2,0,1,2,2,2,2,1,2,3,1,0,3,2,3,3,0,0,0,3,2,1,2,1,
            0,2,0,1,1,0,1,3,1,3,2,0,0,2,0,0,0,0,2,3,3,0,1,1,0,1,2,3,3,3,0,0,1,3,1,3,2,3,3,0,1,3,3,0,1,3,2,3,1,0,1,2,0,0,1,3,1,3,2,1,0,1,3,3,2,3,3,1,1,2,
            2,2,1,2,3,0,0,3,3,3,3,0,0,0,1,3,2,0,1,1,1,3,0,2,1,2,2,2,0,3,3,3,1,1,3,2,1,1,1,0,3,0,1,2,3,3,3,3,1,2,0,3,0,1,1,1,1,0,2,0,0,1,3,2,2,3,3,3,3,3,
            3,0,2,3,0,2,0,0,0,2,0,3,3,2,2,3,3,1,0,0,0,2,3,2,1,0,3,2,1,1,0,0,1,0,0,0,3,1,0,2,0,3,1,0,2,2,2,2,1,0,0,1,2,1,2,1,0,1,1,1,0,3,2,0,2,2,0,3,0,2,
            3,0,0,2,0,3,1,2,0,2,3,1,1,1,2,3,3,2,0,2,1,2,2,2,2,2,0,2,3,1,2,2,2,0,2,2,2,3,3,2,1,2,3,3,3,0,2,3,0,0,3,2,1,3,0,2,2,2,3,0,0,3,1,2,1,3,1,2,1,3,
            0,3,0,0,3,1,0,1,1,0,3,2,2,3,1,2,0,0,2,2,0,2,2,1,2,2,1,0,2,0,1,2,3,1,1,2,2,2,0,3,3,1,3,0,3,3,0,0,0,2,2,3,1,0,0,1,3,1,0,2,3,3,0,0,3,2,0,1,1,3,
            2,0,2,3,3,0,3,3,3,2,0,2,1,1,1,1,1,3,1,2,1,2,2,0,3,1,2,1,0,1,2,2,3,0,2,2,0,2,2,0,2,2,2,3,3,2,2,2,3,2,2,0,0,2,2,0,2,3,3,3,0,3,3,2,0,3,0,1,2,0,
            3,3,0,1,1,2,3,1,3,1,2,1,1,0,3,2,0,2,1,2,3,1,0,3,3,3,0,0,0,3,3,1,1,1,3,0,1,1,1,2,0,0,0,3,2,3,0,0,0,0,0,3,2,2,3,1,0,3,1,1,1,2,0,3,2,0,2,2,1,0,
            1,3,3,0,0,0,2,2,3,3,2,0,0,3,1,3,2,1,3,1,1,2,0,1,3,2,2,0,3,2,3,1,3,1,0,2,3,2,2,2,0,2,2,3,2,1,0,2,1,2,0,1,1,0,0,1,0,2,1,3,2,1,1,2,0,1,3,2,2,3,
        ),
    }

def test_get_gps_sum(puzzle_input, puzzle_input2):
    data = subject.parse_lines(puzzle_input)
    assert subject.get_gps_sum(data) == 10092

    data2 = subject.parse_lines(puzzle_input2)
    assert subject.get_gps_sum(data2) == 2028

    assert subject.get_gps_sum_double(data) == 9021

def test_solve(puzzle_input):
    data = subject.parse_lines(puzzle_input)
    assert subject.solve(data) == (10092, 9021)

